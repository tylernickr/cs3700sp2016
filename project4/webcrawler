#!/usr/bin/python

import sys
import socket
import urlparse
import re

class Crawler:

	def __init__(self, args):
		self.USERNAME = args[0]
		self.PASSWORD = args[1]
		self.BASE_URL = "fring.ccs.neu.edu"
		self.HTML_PORT = 80
		self.LOGIN_PATH = "/accounts/login/?next=/fakebook/"

		self.CSRF_COOKIE = ""
		self.SESSION_COOKIE = ""

		self.HOST_HEADER = "Host: " + self.BASE_URL + "\r\n"
		self.CONN_HEADER = "Connection: close\r\n"
		self.TYPE_HEADER = 'Content-Type: application/x-www-form-urlencoded\r\n'
		self.SPACER = '\r\n'

		self.html_page = ""	
		self.links_to_crawl = []
		self.crawled = []
		self.secret_flags = []

	def run(self):
		self.login()
		self.crawl()

	def login(self):
		self.create_socket()
		get_header = self.getRequestLine('GET', self.LOGIN_PATH)
		msg = get_header + self.CONN_HEADER + self.HOST_HEADER + self.SPACER
		self.sock.send(msg)

		self.readResponse()
		self.findCsrfCookie()
		self.sock.close()

		self.create_socket()
		post_header = self.getRequestLine('POST', self.LOGIN_PATH)
		body = self.getLoginBody()
		msg = post_header + self.CONN_HEADER + self.HOST_HEADER + self.TYPE_HEADER + self.getCsrfCookieHeader() \
			+ self.getLengthHeader(body) + self.SPACER + body
		self.sock.send(msg)

		self.readResponse()
		self.findSessionCookie()
		
		self.sock.close()

		self.create_socket()
		home_header = self.getRequestLine('GET', '/fakebook/')
		msg = home_header + self.CONN_HEADER + self.HOST_HEADER + self.getFullCookieHeader() + self.SPACER
		self.sock.send(msg)

		self.readResponse()
		self.checkForFlags()
		self.findLinks()
		self.sock.close()	

	def crawl(self):
		while len(self.links_to_crawl) > 0:
			link = self.links_to_crawl[0]
			self.processLink(link)
			self.links_to_crawl.pop(0)
			self.crawled.append(link)

		self.sock.close()
		print(self.secret_flags)

	def processLink(self, link):
		self.create_socket()
		head = self.getRequestLine('GET', link)
		msg = head + self.CONN_HEADER + self.HOST_HEADER + self.getFullCookieHeader() + self.SPACER
		self.sock.send(msg)

		self.readResponse()
		self.checkForFlags()
		self.findLinks()
		self.sock.close()


	def getLoginBody(self):
		return 'username=' + self.USERNAME + '&password=' + self.PASSWORD + \
			'&csrfmiddlewaretoken=' + self.CSRF_COOKIE + '&next=/fakebook/\r\n'

	def readResponse(self):
		self.html_page = ""
		while True:
			chunk = self.sock.recv(1024)
			if chunk:
				self.html_page += chunk
			else:
				break
		print(self.html_page)

	def findCsrfCookie(self):
		self.CSRF_COOKIE = re.search(r'Set-Cookie: csrftoken=(.*); expires', self.html_page).group(1)

	def findSessionCookie(self):
		self.SESSION_COOKIE = re.search(r'Set-Cookie: sessionid=(.*); expires', self.html_page).group(1)

	def checkForFlags(self):
		flag_matches = re.search(r"<h2 class='secret_flag' style=\"color:red\">FLAG: ([a-zA-Z0-9]{64})</h2>", self.html_page)
		if flag_matches:
			self.secret_flags.append(flag_matches.group(1))
			print('FOUND SECRED FLAG ON PAGE ' + self.html_page)

	def findLinks(self):
		links = re.findall(r'href=\"(\/fakebook\/\S+\/)\"', self.html_page)
		#print(links)
		self.links_to_crawl += [x for x in links if x not in self.links_to_crawl and x not in self.crawled]

	def getRequestLine(self, type, path):
		return type + " " + path + ' HTTP/1.1\r\n'

	def getLengthHeader(self, body):
		return 'Content-Length: ' + str(len(body)) + '\r\n'

	def getCsrfCookieHeader(self):
		return "Cookie: csrftoken=" + self.CSRF_COOKIE + '\r\n'
		
	def getFullCookieHeader(self):
		return "Cookie: csrftoken=" + self.CSRF_COOKIE + "; sessionid=" + self.SESSION_COOKIE + "\r\n"

	def create_socket(self):
		self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		self.sock.connect((self.BASE_URL, self.HTML_PORT))
		self.sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

if __name__ == "__main__":
	crawler = Crawler(sys.argv[1:3])
	crawler.run()